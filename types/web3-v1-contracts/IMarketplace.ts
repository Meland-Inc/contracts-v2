/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ChangedOwnerCutPerMillion = ContractEventLog<{
  ownerCutPerMillion: string;
  0: string;
}>;
export type OrderCanceled = ContractEventLog<{
  id: string;
  0: string;
}>;
export type OrderCreated = ContractEventLog<{
  id: string;
  productId: string;
  order: [string, string, string, string, string, string, string];
  0: string;
  1: string;
  2: [string, string, string, string, string, string, string];
}>;
export type OrderSellout = ContractEventLog<{
  id: string;
  amount: string;
  tknRate: string;
  isSellout: boolean;
  0: string;
  1: string;
  2: string;
  3: boolean;
}>;

export interface IMarketplace extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IMarketplace;
  clone(): IMarketplace;
  methods: {
    /**
     * Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` (i.e. 0xbc197c81, or its own function selector).
     * @param data Additional data with no specified format
     * @param from The address which previously owned the token
     * @param ids An array containing ids of each token being transferred (order and length must match values array)
     * @param operator The address which initiated the batch transfer (i.e. msg.sender)
     * @param values An array containing amounts of each token being transferred (order and length must match ids array)
     */
    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: (number | string | BN)[],
      values: (number | string | BN)[],
      data: string | number[]
    ): NonPayableTransactionObject<string>;

    /**
     * Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` (i.e. 0xf23a6e61, or its own function selector).
     * @param data Additional data with no specified format
     * @param from The address which previously owned the token
     * @param id The ID of the token being transferred
     * @param operator The address which initiated the transfer (i.e. msg.sender)
     * @param value The amount of tokens being transferred
     */
    onERC1155Received(
      operator: string,
      from: string,
      id: number | string | BN,
      value: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<string>;

    /**
     * Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
     */
    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;
  };
  events: {
    ChangedOwnerCutPerMillion(
      cb?: Callback<ChangedOwnerCutPerMillion>
    ): EventEmitter;
    ChangedOwnerCutPerMillion(
      options?: EventOptions,
      cb?: Callback<ChangedOwnerCutPerMillion>
    ): EventEmitter;

    OrderCanceled(cb?: Callback<OrderCanceled>): EventEmitter;
    OrderCanceled(
      options?: EventOptions,
      cb?: Callback<OrderCanceled>
    ): EventEmitter;

    OrderCreated(cb?: Callback<OrderCreated>): EventEmitter;
    OrderCreated(
      options?: EventOptions,
      cb?: Callback<OrderCreated>
    ): EventEmitter;

    OrderSellout(cb?: Callback<OrderSellout>): EventEmitter;
    OrderSellout(
      options?: EventOptions,
      cb?: Callback<OrderSellout>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "ChangedOwnerCutPerMillion",
    cb: Callback<ChangedOwnerCutPerMillion>
  ): void;
  once(
    event: "ChangedOwnerCutPerMillion",
    options: EventOptions,
    cb: Callback<ChangedOwnerCutPerMillion>
  ): void;

  once(event: "OrderCanceled", cb: Callback<OrderCanceled>): void;
  once(
    event: "OrderCanceled",
    options: EventOptions,
    cb: Callback<OrderCanceled>
  ): void;

  once(event: "OrderCreated", cb: Callback<OrderCreated>): void;
  once(
    event: "OrderCreated",
    options: EventOptions,
    cb: Callback<OrderCreated>
  ): void;

  once(event: "OrderSellout", cb: Callback<OrderSellout>): void;
  once(
    event: "OrderSellout",
    options: EventOptions,
    cb: Callback<OrderSellout>
  ): void;
}
